REALLY IMPORTANT TODOS:

    1. Cover parser and lexer with more tests IMPORTANT new syntax is untested!!!
    2. Extend language with:
        a) objects -- for now I'm not sure how to do them
        b) member access operator . (dot)
    3. Code analyzer -- will analyze for undeclared variables,
      illegal statements, maybe typechecking?
    4. Stable and reliable interpreter

NOT REALLY IMPORTANT TODOS:

    Stack-based virtual machine with manageable heap
    and types support
    Compiler to bytecode
    => better way to execute the code

WHAT I'M IMPLEMENTING RIGHT NOW:

    Starting interpreter
    I need to implement a good type system and lexical scope

    Lexical scope, fucntions, interpreter::executeStatement,
    operations on types

    Actually I decided that there will be no
    fancy mathematical-notated functions in that language
    it's too hard to implement it in a good way
    so it's better not to implement them at all
    I'm talking about fun factorial(1) = 1
                      fun sum(a, 1) = a + 1 etc.

I NEED ANALYZER!!!
So for now i will implement without imports and objects
then i will add some analyzer
after that i can implement imports and objects
and after that i think that i can cover my interpreter with some more tests

+ later i still wanna develop a virtual machine
